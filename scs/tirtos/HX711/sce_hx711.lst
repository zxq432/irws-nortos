               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               ; (None)
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               
               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0080                         dw          #adc24bit/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0084                         dw          #adc24bit/execute
               pFwTaskTerminateFuncTable:
006a ---- 00db                         dw          #adc24bit/terminate
               
               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)
               
               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: ADC24bit"
               adc24bit/cfg:
               adc24bit/cfg/adcDthr:
0075 ---- 001e                         dw          #30
               adc24bit/cfg/bCount:
0076 ---- 00f0                         dw          #240
               adc24bit/cfg/dCount:
0077 ---- 0006                         dw          #6
               adc24bit/input:
               adc24bit/output:
               adc24bit/output/adcD:
0078 ---- 0000                         dw          #0
               adc24bit/output/adcVal:
0079 ---- 0000                         dw          #0
               adc24bit/output/buzz:
007a ---- 0000                         dw          #0
               adc24bit/state:
               adc24bit/state/adcVal:
007b ---- 0000                         dw          #0
               adc24bit/state/bCount:
007c ---- 00f0                         dw          #240
               adc24bit/state/buzz:
007d ---- 0000                         dw          #0
               adc24bit/state/dCount:
007e ---- 0006                         dw          #6
               adc24bit/state/exit:
007f ---- 0000                         dw          #0
               .segment end "Task: ADC24bit"
               
               
               .segment begin "Task: ADC24bit"
               adc24bit/initialize:
               ;? gpioClearOutput(AUXIO_AXS_VCC); //Power off HX711 at the end
0080 ---- 470e                         iobclr      #(3 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (3 >> 3))]
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
0081 ---- 0001                         ld          R0, #1
0082 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adc24bit/initializeDone:
0083 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               adc24bit/execute:
               ;? if(state.exit == 0) {
0084 ---- 087f                         ld          R0, [#adc24bit/state/exit]
0085 ---- 8a00                         cmp         R0, #0
0086 ---- be4e                         bneq        /id0071
               ;?     gpioSetOutput(AUXIO_AXS_VCC); //DIO_9 clamp to VDDS, Power on HX711 at start
0087 ---- 670e                             iobset      #(3 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (3 >> 3))]
               ;?     fwDelayUs(25, FW_DELAY_RANGE_50_US); // HX711 power on output stable delay 25us, 4 covert cycles.
0088 ---- 704b                             ld          R7, #(((25 * 24 ) + ((1 << 3) - 1)) >> 3)
0089 ---- 6003                             ld          R6, #3
008a ---- 14dc                             jsr         FwDelay
               ;?     state.buzz = output.buzz;
008b ---- 087a                             ld          R0, [#adc24bit/output/buzz]
008c ---- 0c7d                             st          R0, [#adc24bit/state/buzz]
               ;?     S16 DTval = 1;
008d ---- 7001                             ld          R7, #1
               ;?     while (DTval == 1) { // wait till the HX711_DT is low for 1 ADC sample ready
               /id0077:
008e ---- fa01                             cmp         R7, #1
008f ---- be03                             bneq        /id0078
               ;?         gpioGetInputValue(AUXIO_I_DT; DTval);
0090 ---- 500a                                 ld          R5, #10
0091 ---- 14e2                                 jsr         gpioGetInputValue
               ;?     }
0092 ---- 048e                             jmp         /id0077
               /id0078:
               ;?     S16 bits = 16;
0093 ---- 0010                             ld          R0, #16
               ;?     while(bits != 0) {
               /id0085:
0094 ---- 8a00                             cmp         R0, #0
0095 ---- b60e                             beq         /id0086
               ;?         gpioSetOutput(AUXIO_O_SCK);
0096 ---- 740e                                 iobset      #(4 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (4 >> 3))]
               ;?         bits -= 1;
0097 ---- 88ff                                 add         R0, #-1
               ;?         output.adcVal <<= 1;
0098 ---- 5879                                 ld          R5, [#adc24bit/output/adcVal]
0099 ---- dda1                                 lsl         R5, #1
009a ---- 5c79                                 st          R5, [#adc24bit/output/adcVal]
               ;?         gpioClearOutput(AUXIO_O_SCK);
009b ---- 540e                                 iobclr      #(4 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (4 >> 3))]
               ;?         gpioGetInputValue(AUXIO_I_DT; DTval);
009c ---- 500a                                 ld          R5, #10
009d ---- 14e2                                 jsr         gpioGetInputValue
               ;?         if(DTval == 1) {
009e ---- fa01                                 cmp         R7, #1
009f ---- be03                                 bneq        /id0095
               ;?             output.adcVal += 1;
00a0 ---- 5879                                     ld          R5, [#adc24bit/output/adcVal]
00a1 ---- d801                                     add         R5, #1
00a2 ---- 5c79                                     st          R5, [#adc24bit/output/adcVal]
               ;?         }
               /id0095:
               ;?     } // while bits!=0
00a3 ---- 0494                             jmp         /id0085
               /id0086:
               ;?     
               ;?     gpioClearOutput(AUXIO_AXS_VCC); //Power off HX711 at the end
00a4 ---- 470e                             iobclr      #(3 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (3 >> 3))]
               ;?     
               ;?     output.adcD = (@(output.adcVal - state.adcVal));
00a5 ---- 0879                             ld          R0, [#adc24bit/output/adcVal]
00a6 ---- 187b                             ld          R1, [#adc24bit/state/adcVal]
00a7 ---- 8d19                             sub         R0, R1
00a8 ---- 8d90                             abs         R0
00a9 ---- 0c78                             st          R0, [#adc24bit/output/adcD]
               ;?     if(output.adcD < cfg.adcDthr) {
00aa ---- 0878                             ld          R0, [#adc24bit/output/adcD]
00ab ---- 1875                             ld          R1, [#adc24bit/cfg/adcDthr]
00ac ---- 8d29                             cmp         R0, R1
00ad ---- e603                             bges        /id0101
               ;?         output.buzz = 0;
00ae ---- 0000                                 ld          R0, #0
00af ---- 0c7a                                 st          R0, [#adc24bit/output/buzz]
               ;?     } else {
00b0 ---- 04b5                             jmp         /id0104
               /id0101:
               ;?         output.buzz = 1;
00b1 ---- 0001                                 ld          R0, #1
00b2 ---- 0c7a                                 st          R0, [#adc24bit/output/buzz]
               ;?         state.adcVal = output.adcVal;
00b3 ---- 0879                                 ld          R0, [#adc24bit/output/adcVal]
00b4 ---- 0c7b                                 st          R0, [#adc24bit/state/adcVal]
               ;?     }
               /id0104:
               ;?     
               ;?     state.dCount -= 1;
00b5 ---- 087e                             ld          R0, [#adc24bit/state/dCount]
00b6 ---- 88ff                             add         R0, #-1
00b7 ---- 0c7e                             st          R0, [#adc24bit/state/dCount]
               ;?     if(output.buzz == 1) {
00b8 ---- 087a                             ld          R0, [#adc24bit/output/buzz]
00b9 ---- 8a01                             cmp         R0, #1
00ba ---- be02                             bneq        /id0110
               ;?         state.exit = 1;
00bb ---- 0001                                 ld          R0, #1
00bc ---- 0c7f                                 st          R0, [#adc24bit/state/exit]
               ;?     }
               /id0110:
               ;?     if(state.buzz == 1) {
00bd ---- 087d                             ld          R0, [#adc24bit/state/buzz]
00be ---- 8a01                             cmp         R0, #1
00bf ---- be02                             bneq        /id0113
               ;?         state.exit = 1;
00c0 ---- 0001                                 ld          R0, #1
00c1 ---- 0c7f                                 st          R0, [#adc24bit/state/exit]
               ;?     }
               /id0113:
               ;?     if(state.dCount == 0) {
00c2 ---- 087e                             ld          R0, [#adc24bit/state/dCount]
00c3 ---- 8a00                             cmp         R0, #0
00c4 ---- be02                             bneq        /id0116
               ;?         state.exit = 1;
00c5 ---- 0001                                 ld          R0, #1
00c6 ---- 0c7f                                 st          R0, [#adc24bit/state/exit]
               ;?     }
               /id0116:
               ;?     if(state.bCount == cfg.bCount) {
00c7 ---- 087c                             ld          R0, [#adc24bit/state/bCount]
00c8 ---- 1876                             ld          R1, [#adc24bit/cfg/bCount]
00c9 ---- 8d29                             cmp         R0, R1
00ca ---- be02                             bneq        /id0119
               ;?         state.exit = 1;
00cb ---- 0001                                 ld          R0, #1
00cc ---- 0c7f                                 st          R0, [#adc24bit/state/exit]
               ;?     }
               /id0119:
               ;?     if(state.exit == 1) {
00cd ---- 087f                             ld          R0, [#adc24bit/state/exit]
00ce ---- 8a01                             cmp         R0, #1
00cf ---- be05                             bneq        /id0123
               ;?         fwGenAlertInterrupt(); // Generate ALERT interrupt
00d0 ---- 086c                                 ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00d1 ---- 8201                                 or          R0, #(1 << 0)
00d2 ---- 0c6c                                 st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?         state.dCount = cfg.dCount;
00d3 ---- 0877                                 ld          R0, [#adc24bit/cfg/dCount]
00d4 ---- 0c7e                                 st          R0, [#adc24bit/state/dCount]
               ;?     }
               /id0123:
               ;? } //if exit
               /id0071:
               ;? state.bCount += 1;
00d5 ---- 087c                         ld          R0, [#adc24bit/state/bCount]
00d6 ---- 8801                         add         R0, #1
00d7 ---- 0c7c                         st          R0, [#adc24bit/state/bCount]
               ;? fwScheduleTask(1); // Schedule the next execution of the task
00d8 ---- 0001                         ld          R0, #1
00d9 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adc24bit/executeDone:
00da ---- adb7                         rts         
                                       
                                       
                                       
                                       
               adc24bit/terminate:
               ;? 
               adc24bit/terminateDone:
00db ---- adb7                         rts         
               .segment end "Task: ADC24bit"
               
               
               .segment begin "Procedure Libary"
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
00dc ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]
               
                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
00dd ---- eda4                         lsl         R6, #4
00de ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]
               
                                       ; Start the timer, wait for it to trigger, and stop it
00df ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
00e0 ---- cdb1                         wev1        #WEVSEL_TIMER0
00e1 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R5 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R6, R7
               gpioGetInputValue:
                                       ; Get GPIOs 15:8
00e2 ---- e913                         in          R6, [#IOP_AIODIO1_GPIODIN]
00e3 ---- eda0                         lsl         R6, #8
               
                                       ; Get GPIOs 7:0 and combine
00e4 ---- f912                         in          R7, [#IOP_AIODIO0_GPIODIN]
00e5 ---- fd0e                         or          R7, R6
               
                                       ; Move the desired GPIO pin value into bit 0 and mask
00e6 ---- fd8d                         lsr         R7, R5
00e7 ---- f001                         and         R7, #0x0001
00e8 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by DESKTOP-NJ22OJR at 2018-08-23 06:07:00.896
