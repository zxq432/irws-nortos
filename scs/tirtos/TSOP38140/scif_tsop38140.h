/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     TSOP38140
  * - <b>Project file</b>:     G:/ti/workspace_v8/scs/tirtos/TSOP38140/TSOP38140.scp
  * - <b>Code prefix</b>:      TSOP38140
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.2.0.569
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC2640R2F, revision -, package QFN32 4x4 RSM
  * - <b>Created</b>:          2018-08-19 12:29:49.871
  * - <b>Computer</b>:         DESKTOP-NJ22OJR
  * - <b>User</b>:             W
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * No description entered
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - IRLED:
  *     - <b>I: OUT</b>: DIO9
  *     - <b>XS: VS 0</b>: DIO8
  *     - <b>XS: VS 1</b>: DIO1
  *     - <b>O: LED</b>: DIO0
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_irled IRLED
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     TSOP38140
  * - <b>Code prefix</b>:      TSOP38140
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_TSOP38140_H
#define SCIF_TSOP38140_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TSOP38140_TARGET_CHIP_NAME_CC2640R2F
/// Target chip package
#define SCIF_TSOP38140_TARGET_CHIP_PACKAGE_QFN32_4X4_RSM

/// Number of tasks implemented by this driver
#define SCIF_TSOP38140_TASK_COUNT 1

/// IRLED: Task ID
#define SCIF_TSOP38140_IRLED_TASK_ID 0


/// IRLED: 
#define SCIF_TSOP38140_IRLED_ACTIVE_DURATION 6
/// IRLED: 
#define SCIF_TSOP38140_IRLED_INACTIVE_DURATION 144
/// IRLED: 
#define SCIF_TSOP38140_IRLED_TD_MAX 9
/// IRLED: 
#define SCIF_TSOP38140_IRLED_TD_MIN 3
/// IRLED: 
#define SCIF_TSOP38140_IRLED_TPI_N 6
/// IRLED: TPI_N - 4
#define SCIF_TSOP38140_IRLED_TPO_MIN 2
/// IRLED I/O mapping: OUT
#define SCIF_TSOP38140_IRLED_DIO_I_OUT 9
/// IRLED I/O mapping: VS
#define SCIF_TSOP38140_IRLED_DIO_XS_VS { 8, 1 }
/// IRLED I/O mapping: LED
#define SCIF_TSOP38140_IRLED_DIO_O_LED 0


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// IRLED: Task configuration structure
typedef struct {
    uint16_t bCount;        ///< Battery count
    uint16_t dCount;        ///< data count
    uint16_t pAuxioXsVs[2]; ///< I/O mapping: VS
} SCIF_TSOP38140_IRLED_CFG_T;


/// IRLED: Task output data structure
typedef struct {
    uint16_t buzz; ///< 
} SCIF_TSOP38140_IRLED_OUTPUT_T;


/// IRLED: Task state structure
typedef struct {
    uint16_t bCount; ///< 
    uint16_t buzz;   ///< 
    uint16_t dCount; ///< 
    uint16_t exit;   ///< 
    uint16_t out[9]; ///< 
} SCIF_TSOP38140_IRLED_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_TSOP38140_IRLED_CFG_T cfg;
        SCIF_TSOP38140_IRLED_OUTPUT_T output;
        SCIF_TSOP38140_IRLED_STATE_T state;
    } irled;
} SCIF_TSOP38140_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTsop38140TaskData    (*((volatile SCIF_TSOP38140_TASK_DATA_T*) 0x400E00EA))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifTsop38140DriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifTsop38140ReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifTsop38140StartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifTsop38140StartRtcTicksNow(uint32_t tickPeriod);
void scifTsop38140StopRtcTicks(void);


#endif
//@}


// Generated by DESKTOP-NJ22OJR at 2018-08-19 12:29:49.871
